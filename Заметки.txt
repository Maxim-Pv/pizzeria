    Устанавлием типы для переменных 

let pizza: string = 'Salami';

let price: number = 20;

let atStock: boolean = true;
let pizzas: string[] = ['Salami', 'Saussage'];

let number: number[] = [1,2,3];


    Прописываем типы для объектов

const order: {title: string, quantity: number} = {title: 'margarita', quantity: 10};
это будет работать, но мы не сможем переиспользовать наш тип в др. частях приложения, поэтому 

можем использовать type

type Order = {
    title: string;
    quantity: number
}

const order: Order = {title: 'margarita', quantity: 10};

    чтобы сделать свойство не обязательным добавляем ?

type Order = {
    title: string;
    quantity?: number
}

const order: Order = {title: 'margarita'};

    переиспользование Order
пример

const orders: Order[] = [
    {title: 'margarita'},
    {title: 'salami', quantity: 10}
]

    Объединения или union. Какие то переменные могут обратиться к разным типам.

let number: null | number = null; // здесь number может быть типом либо null либо number (| - или)

number = 10;

    Типы для функций

type PrintTitle = (title: string) => void; // так как возвращает undefined пишем void 
type PrintTitle = (title: string) => string // то и здесь пишем string

const printTitle: PrintTitle = (title) => {
    console.log(title);
    return title // если же функция будет возвращать строку 
}

printTitle('salami');

    Бывают случаи когда нам не известен тип данных
    
